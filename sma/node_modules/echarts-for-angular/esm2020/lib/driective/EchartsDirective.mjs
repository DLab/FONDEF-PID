import { Directive, EventEmitter, Input, Output } from "@angular/core";
import * as echarts from 'echarts/core';
import { CanvasRenderer } from 'echarts/renderers';
import { HtmlHelper } from "../internal/HtmlHelper";
import * as i0 from "@angular/core";
export class EchartsDirective {
    constructor(_el) {
        this._el = _el;
        this.extentions = [];
        this.isResizable = true;
        this.defaultWidth = 400;
        this.defaultHeight = 400;
        this.periodicityInMiliSeconds = 2000;
        this.theme = '';
        this.chartInit = new EventEmitter();
    }
    ngOnInit() {
        echarts.use([...this.extentions, CanvasRenderer]);
        this._echartsInstance = echarts.init(this._el.nativeElement, this.theme, {
            width: this._el.nativeElement.clientWidth === this.defaultWidth ? 400 : undefined,
            height: this._el.nativeElement.clientHeight === 0 ? this.defaultHeight : undefined
        });
        this.chartInit.emit(this._echartsInstance);
        this._setParams();
        if (this.isResizable) {
            this._addResizbleFunctionality();
        }
    }
    ngOnChanges(changes) {
        if (changes.options && !changes.options.firstChange) {
            this._setParams();
        }
        if (changes.isResizable && !changes.isResizable.firstChange) {
            if (this.isResizable) {
                this._addResizbleFunctionality();
            }
            else {
                if (this._subscription != null)
                    this._subscription.unsubscribe();
            }
        }
    }
    _addResizbleFunctionality() {
        if (this._subscription != null)
            this._subscription.unsubscribe();
        this._subscription = HtmlHelper.getWidthSensor(this._el.nativeElement).subscribe(() => {
            if (this._echartsInstance != null) {
                this._echartsInstance.resize();
            }
        });
    }
    _setParams() {
        if (this._echartsInstance != null && this.options != null) {
            this._echartsInstance.setOption(this.options, true);
        }
    }
    ngOnDestroy() {
        if (this._subscription != null)
            this._subscription.unsubscribe();
    }
}
EchartsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: EchartsDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
EchartsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.8", type: EchartsDirective, selector: "[echarts]", inputs: { options: "options", extentions: "extentions", isResizable: "isResizable", defaultWidth: "defaultWidth", defaultHeight: "defaultHeight", periodicityInMiliSeconds: "periodicityInMiliSeconds", theme: "theme" }, outputs: { chartInit: "chartInit" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: EchartsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[echarts]"
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{
                type: Input
            }], extentions: [{
                type: Input
            }], isResizable: [{
                type: Input
            }], defaultWidth: [{
                type: Input
            }], defaultHeight: [{
                type: Input
            }], periodicityInMiliSeconds: [{
                type: Input
            }], theme: [{
                type: Input
            }], chartInit: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWNoYXJ0c0RpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2VjaGFydHN4L3NyYy9saWIvZHJpZWN0aXZlL0VjaGFydHNEaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFnQyxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBR2hJLE9BQU8sS0FBSyxPQUFPLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBUXBELE1BQU0sT0FBTyxnQkFBZ0I7SUFlekIsWUFDcUIsR0FBNEI7UUFBNUIsUUFBRyxHQUFILEdBQUcsQ0FBeUI7UUFkeEMsZUFBVSxHQUFVLEVBQUUsQ0FBQztRQUN2QixnQkFBVyxHQUFZLElBQUksQ0FBQztRQUM1QixpQkFBWSxHQUFXLEdBQUcsQ0FBQztRQUMzQixrQkFBYSxHQUFXLEdBQUcsQ0FBQztRQUM1Qiw2QkFBd0IsR0FBVyxJQUFJLENBQUM7UUFDeEMsVUFBSyxHQUFvQixFQUFFLENBQUM7UUFFM0IsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDO0lBUXRELENBQUM7SUFFTCxRQUFRO1FBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDckUsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDakYsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFNBQVM7U0FDckYsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztTQUNwQztJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDakQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JCO1FBRUQsSUFBSSxPQUFPLENBQUMsV0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUU7WUFDekQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNsQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQzthQUNwQztpQkFBTTtnQkFDSCxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSTtvQkFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3BFO1NBQ0o7SUFDTCxDQUFDO0lBRU8seUJBQXlCO1FBQzdCLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJO1lBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqRSxJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2xGLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTtnQkFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2xDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ08sVUFBVTtRQUNkLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN2RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdkQ7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJO1lBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyRSxDQUFDOzs2R0E5RFEsZ0JBQWdCO2lHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFKNUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsV0FBVztpQkFDeEI7aUdBR1ksT0FBTztzQkFBZixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0csd0JBQXdCO3NCQUFoQyxLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFFSSxTQUFTO3NCQUFsQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuaW1wb3J0ICogYXMgZWNoYXJ0cyBmcm9tICdlY2hhcnRzL2NvcmUnO1xyXG5pbXBvcnQgeyBDYW52YXNSZW5kZXJlciB9IGZyb20gJ2VjaGFydHMvcmVuZGVyZXJzJztcclxuaW1wb3J0IHsgSHRtbEhlbHBlciB9IGZyb20gXCIuLi9pbnRlcm5hbC9IdG1sSGVscGVyXCI7XHJcbmltcG9ydCB7IEVDaGFydHNPcHRpb24gfSBmcm9tICdlY2hhcnRzJztcclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcIltlY2hhcnRzXVwiXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRWNoYXJ0c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCkgb3B0aW9uczogRUNoYXJ0c09wdGlvbiB8IHVuZGVmaW5lZDtcclxuICAgIEBJbnB1dCgpIGV4dGVudGlvbnM6IGFueVtdID0gW107XHJcbiAgICBASW5wdXQoKSBpc1Jlc2l6YWJsZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBkZWZhdWx0V2lkdGg6IG51bWJlciA9IDQwMDtcclxuICAgIEBJbnB1dCgpIGRlZmF1bHRIZWlnaHQ6IG51bWJlciA9IDQwMDtcclxuICAgIEBJbnB1dCgpIHBlcmlvZGljaXR5SW5NaWxpU2Vjb25kczogbnVtYmVyID0gMjAwMDtcclxuICAgIEBJbnB1dCgpIHRoZW1lOiBPYmplY3QgfCBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBAT3V0cHV0KCkgY2hhcnRJbml0ID0gbmV3IEV2ZW50RW1pdHRlcjxlY2hhcnRzLkVDaGFydHM+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfZWNoYXJ0c0luc3RhbmNlOiBlY2hhcnRzLkVDaGFydHMgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PlxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBlY2hhcnRzLnVzZShbLi4udGhpcy5leHRlbnRpb25zLCBDYW52YXNSZW5kZXJlcl0pO1xyXG4gICAgICAgIHRoaXMuX2VjaGFydHNJbnN0YW5jZSA9IGVjaGFydHMuaW5pdCh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB0aGlzLnRoZW1lLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoID09PSB0aGlzLmRlZmF1bHRXaWR0aCA/IDQwMCA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodCA9PT0gMCA/IHRoaXMuZGVmYXVsdEhlaWdodCA6IHVuZGVmaW5lZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2hhcnRJbml0LmVtaXQodGhpcy5fZWNoYXJ0c0luc3RhbmNlKTtcclxuICAgICAgICB0aGlzLl9zZXRQYXJhbXMoKTtcclxuICAgICAgICBpZiAodGhpcy5pc1Jlc2l6YWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRSZXNpemJsZUZ1bmN0aW9uYWxpdHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMgJiYgIWNoYW5nZXMub3B0aW9ucy5maXJzdENoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRQYXJhbXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmlzUmVzaXphYmxlICYmICFjaGFuZ2VzLmlzUmVzaXphYmxlLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmVzaXphYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRSZXNpemJsZUZ1bmN0aW9uYWxpdHkoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24gIT0gbnVsbCkgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfYWRkUmVzaXpibGVGdW5jdGlvbmFsaXR5KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24gIT0gbnVsbCkgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gSHRtbEhlbHBlci5nZXRXaWR0aFNlbnNvcih0aGlzLl9lbC5uYXRpdmVFbGVtZW50KS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZWNoYXJ0c0luc3RhbmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VjaGFydHNJbnN0YW5jZS5yZXNpemUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfc2V0UGFyYW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9lY2hhcnRzSW5zdGFuY2UgIT0gbnVsbCAmJiB0aGlzLm9wdGlvbnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lY2hhcnRzSW5zdGFuY2Uuc2V0T3B0aW9uKHRoaXMub3B0aW9ucywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24gIT0gbnVsbCkgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuIl19