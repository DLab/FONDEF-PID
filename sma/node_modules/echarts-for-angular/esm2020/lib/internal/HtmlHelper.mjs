import { interval } from 'rxjs';
import { filter, map } from 'rxjs/operators';
export class HtmlHelper {
    static elementIsFocusable(ele) {
        return ele.getAttribute("tabindex") != null;
    }
    static getWidthSensor(element, periodicityInMiliSeconds = 2000) {
        let oldWidth = element.clientWidth;
        return interval(periodicityInMiliSeconds).pipe(filter(ignore => {
            if (Math.abs(oldWidth - element.clientWidth) > 2) {
                oldWidth = element.clientWidth;
                return true;
            }
            return false;
        }), map(ignore => element.clientWidth));
    }
    static getHeightSensor(element, periodicityInMiliSeconds = 2000) {
        let oldHeight = element.clientHeight;
        return interval(periodicityInMiliSeconds).pipe(filter(ignore => {
            if (Math.abs(oldHeight - element.clientHeight) > 2) {
                oldHeight = element.clientHeight;
                return true;
            }
            return false;
        }), map(ignore => element.clientWidth));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHRtbEhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2VjaGFydHN4L3NyYy9saWIvaW50ZXJuYWwvSHRtbEhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsTUFBTSxPQUFPLFVBQVU7SUFFbkIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEdBQWdCO1FBQ3RDLE9BQU8sR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQ2pCLE9BQW9CLEVBQ3BCLDJCQUFtQyxJQUFJO1FBRXZDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDbkMsT0FBTyxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLENBQzFDLE1BQU0sQ0FDRixNQUFNLENBQUMsRUFBRTtZQUNMLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDOUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7Z0JBQy9CLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQ0osRUFDRCxHQUFHLENBQ0MsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUNoQyxDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FDbEIsT0FBb0IsRUFDcEIsMkJBQW1DLElBQUk7UUFFdkMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUNyQyxPQUFPLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLElBQUksQ0FDMUMsTUFBTSxDQUNGLE1BQU0sQ0FBQyxFQUFFO1lBQ0wsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNoRCxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztnQkFDakMsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FDSixFQUNELEdBQUcsQ0FDQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQ2hDLENBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIGludGVydmFsIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEh0bWxIZWxwZXIge1xyXG5cclxuICAgIHN0YXRpYyBlbGVtZW50SXNGb2N1c2FibGUoZWxlOiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBlbGUuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIikgIT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0V2lkdGhTZW5zb3IoXHJcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgcGVyaW9kaWNpdHlJbk1pbGlTZWNvbmRzOiBudW1iZXIgPSAyMDAwXHJcbiAgICApOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgICAgIGxldCBvbGRXaWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgcmV0dXJuIGludGVydmFsKHBlcmlvZGljaXR5SW5NaWxpU2Vjb25kcykucGlwZShcclxuICAgICAgICAgICAgZmlsdGVyKFxyXG4gICAgICAgICAgICAgICAgaWdub3JlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMob2xkV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoKSA+IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkV2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBtYXAoXHJcbiAgICAgICAgICAgICAgICBpZ25vcmUgPT4gZWxlbWVudC5jbGllbnRXaWR0aFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0SGVpZ2h0U2Vuc29yKFxyXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIHBlcmlvZGljaXR5SW5NaWxpU2Vjb25kczogbnVtYmVyID0gMjAwMFxyXG4gICAgKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcclxuICAgICAgICBsZXQgb2xkSGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIGludGVydmFsKHBlcmlvZGljaXR5SW5NaWxpU2Vjb25kcykucGlwZShcclxuICAgICAgICAgICAgZmlsdGVyKFxyXG4gICAgICAgICAgICAgICAgaWdub3JlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMob2xkSGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQpID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRIZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgbWFwKFxyXG4gICAgICAgICAgICAgICAgaWdub3JlID0+IGVsZW1lbnQuY2xpZW50V2lkdGhcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iXX0=